class AES{
  static List<List<int>> state = [[]];
  static List<List<int>> expandKey = [[]];
  static List<int> plantText = [];
  static List<int>  key = [];
  List<int> Sbox = [
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01,0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
  ];
  void SubBytes()
  {
    for (int i = 0; i < 4; i++)
    {
      for (int j = 0; j < 4; j++)
      {
        state[i][j] = SubByte(state[i][j]);
  }
  }
  }
  int SubByte(int alterByte)
  {
    int x = alterByte & 0xf;
    int y = (alterByte & 0xf0) >> 4;
    return Sbox.sbox[y][x];
  }
  void ShiftRows()
  {
    Shift(1, 1);
    Shift(2, 2);
    Shift(3, 3);
  }
  void Shift(int NRow, int shift)
  {
    for (int i = 1; i <= shift; i++)
    {
      int temp = state[NRow][0];
      state[NRow][0] = state[NRow][1];
      state[NRow][1] = state[NRow][2];
        state[NRow][2] = state[NRow][3];
      state[NRow][3] = temp;
  }
    //StateLog();
  }
  void MixColumns()
  {
    for (int i = 0; i < 4; i++)
    {
      List<int> a = List.filled(4, 0);
      List<int> b = List.filled(4, 0);
      List<int> result = List.filled(4, 0);

      for (int c = 0; c < 4; c++)
      {
        a[c] = state[c][i];
        int h = ((state[c][i] >> 7) & 1);
        b[c] = (state[c][i] << 1);
        b[c] = (b[c] ^ h * 0x1b);
  }

  result[0] = ((b[0] ^ a[3] ^ a[2] ^ b[1] ^ a[1]) % 256);
  result[1] = ((b[1] ^ a[0] ^ a[3] ^ b[2] ^ a[2]) % 256);
  result[2] = ((b[2] ^ a[1] ^ a[0] ^ b[3] ^ a[3]) % 256);
  result[3] = ((b[3] ^ a[2] ^ a[1] ^ b[0] ^ a[0]) % 256);
  state[0][i] = result[0];
  state[1][i] = result[1];
  state[2][i] = result[2];
  state[3][i] = result[3];
  }
  }

  void AddRoundKey(int index)
  {
    for (int i = 0; i < 4; i++)
    {
      for (int j = 0; j < 4; j++)
      {
        state[i][j] ^= expandKey[i][index + j];
  }
  }
  }
  void KeyExpantion(int Nk, int Nr)
  {
    expandKey = List.filled(4 * (Nr + 1), 0);
  int i = 0;
  while (i < Nk)
    {
      expandKey[0][i] = key[i * 4];
      expandKey[1][i] = key[i * 4 + 1];
      expandKey[2][i] = key[i * 4 + 2];
      expandKey[3][i] = key[i * 4 + 3];
      i++;
    }
    while (i < 4 * (Nr + 1))
    {
      List<int> temp =
    [expandKey[0][i - 1], expandKey[1][i - 1], expandKey[2][i - 1],
      expandKey[3][i - 1] ];
    if (i % Nk == 0)
    {
    temp = RotWords(temp);
    temp[0] = (SubByte(temp[0]) ^ Sbox.rcon[(i / Nk) - 1]);
    temp[1] = SubByte(temp[1]);
    temp[2] = SubByte(temp[2]);
    temp[3] = SubByte(temp[3]);
    }
    else if (Nk > 6 && i % Nk == 4)
    {
    temp[0] = SubByte(temp[0]);
    temp[1] = SubByte(temp[1]);
    temp[2] = SubByte(temp[2]);
    temp[3] = SubByte(temp[3]);
    }
      expandKey[0][i] = expandKey[0][i - Nk] ^ temp[0];
      expandKey[1][i] = expandKey[1][i - Nk] ^ temp[1];
      expandKey[2][i] = expandKey[2][i - Nk] ^ temp[2];
      expandKey[3][i] = expandKey[3][i - Nk] ^ temp[3];
    i++;
    }
    ExpanLog(Nr);
    return;
  }
  List<int> RotWords(List<int> array)
  {
  if (array.length != 4)
  {
  throw new Exception("RotWords error !");
  }
  int temp = array[0];
  array[0] = array[1];
  array[1] = array[2];
  array[2] = array[3];
  array[3] = temp;
  return array;
  }
  void StateLog()
  {
    print("");
    for (int i = 0; i < 4; i++)
    {
      for (int j = 0; j < 4; j++)
      {
        print(state[i][j]);
      }
      print("");;
    }
    print("");;
  }
  void ExpanLog(int Nr)
  {
    print("");
    for (int i = 0; i < 4; i++)
    {
      for (int j = 0; j < (Nr + 1) * 4; j++)
      {
        print(expandKey[i][j]);
      }
      print("");
    }
    print("");
  }
}
void main(){

}